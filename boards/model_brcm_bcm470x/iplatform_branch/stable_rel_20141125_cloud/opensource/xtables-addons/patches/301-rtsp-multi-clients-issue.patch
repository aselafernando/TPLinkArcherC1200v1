Index: extensions/rtsp/nf_conntrack_rtsp.c
===================================================================
--- extensions/rtsp/nf_conntrack_rtsp.c	(版本 1952)
+++ extensions/rtsp/nf_conntrack_rtsp.c	(工作副本)
@@ -29,6 +29,8 @@
  *      - removed calls to NAT code from conntrack helper: NAT no longer needed to use rtsp-conntrack
  * 2007-04-18: Michael Guntsche <mike at it-loops.com>
  * 			- Port to new NF API
+ * 2014-07-10: Guo Dongxian <guodongxian@tp-link.com.cn>
+ *          - Add port convert by ip address
  */
 
 #include <linux/module.h>
@@ -41,6 +43,7 @@
 #include <net/netfilter/nf_conntrack_core.h>
 #include <net/netfilter/nf_conntrack_expect.h>
 #include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_nat_helper.h>
 #include "nf_conntrack_rtsp.h"
 
 #define NF_NEED_STRNCASECMP
@@ -95,6 +98,14 @@
 
 #define SKIP_WSPACE(ptr,len,off) while(off < len && isspace(*(ptr+off))) { off++; }
 
+/* Add by guodongxian, 2014-07-10 */
+#define IP_CONVERT_TO_PORT(__ip) \
+	((((__ip & 0xff000000) >> 24) + (__ip & 0x000000ff)) << 4)
+
+/*** debug trace ***/
+#define rtsp_info(fmt, args...)\
+	/* printk(KERN_INFO "%s:"fmt, __FUNCTION__, ##args) */
+
 /*
  * Parse an RTSP packet.
  *
@@ -171,18 +182,24 @@
  */
 static int
 rtsp_parse_transport(char* ptran, uint tranlen,
-                     struct ip_ct_rtsp_expect* prtspexp)
+                     struct ip_ct_rtsp_expect* prtspexp,
+                     struct nf_conn *ct)
 {
 	int     rc = 0;
 	uint    off = 0;
 	
+	u_int16_t portex = 0;
+	__be32 srcip = ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip;
+
+	portex = (u_int16_t)IP_CONVERT_TO_PORT(srcip);
+
 	if (tranlen < 10 || !iseol(ptran[tranlen-1]) ||
 	    nf_strncasecmp(ptran, "Transport:", 10) != 0) {
 		pr_info("sanity check failed\n");
 		return 0;
 	}
 	
-	pr_debug("tran='%.*s'\n", (int)tranlen, ptran);
+	rtsp_info("tran='%.*s'\n", (int)tranlen, ptran);
 	off += 10;
 	SKIP_WSPACE(ptran, tranlen, off);
 	
@@ -213,19 +230,19 @@
 					pr_debug("multiple ports found, port %hu ignored\n", port);
 				else {
 					pr_debug("lo port found : %hu\n", port);
-					prtspexp->loport = prtspexp->hiport = port;
+					prtspexp->loport = prtspexp->hiport = port + portex;
 					if (ptran[off] == '-') {
 						off++;
 						numlen = nf_strtou16(ptran+off, &port);
 						off += numlen;
 						prtspexp->pbtype = pb_range;
-						prtspexp->hiport = port;
+						prtspexp->hiport = port + portex;
 						
 						// If we have a range, assume rtp:
 						// loport must be even, hiport must be loport+1
 						if ((prtspexp->loport & 0x0001) != 0 ||
 						    prtspexp->hiport != prtspexp->loport+1) {
-							pr_debug("incorrect range: %hu-%hu, correcting\n",
+							rtsp_info("incorrect range: %hu-%hu, correcting\n",
 							       prtspexp->loport, prtspexp->hiport);
 							prtspexp->loport &= 0xfffe;
 							prtspexp->hiport = prtspexp->loport+1;
@@ -235,7 +252,7 @@
 						numlen = nf_strtou16(ptran+off, &port);
 						off += numlen;
 						prtspexp->pbtype = pb_discon;
-						prtspexp->hiport = port;
+						prtspexp->hiport = port + portex;
 					}
 					rc = 1;
 				}
@@ -382,7 +399,7 @@
 
 		if (strncmp(pdata+cmdoff, "SETUP ", 6) != 0)
 			continue;   /* not a SETUP message */
-		pr_debug("found a setup message\n");
+		rtsp_info("found a setup message\n");
 
 		limit = pdata+datalen;
 		/*fetch the address for RTP media server*/
@@ -391,7 +408,7 @@
 
 		off = 0;
 		if(translen) {
-			rtsp_parse_transport(pdata+transoff, translen, &expinfo);
+			rtsp_parse_transport(pdata+transoff, translen, &expinfo, ct);
 		}
 
 		if (expinfo.loport == 0) {
@@ -399,7 +416,7 @@
 			continue;   /* no udp transports found */
 		}
 
-		pr_debug("udp transport found, ports=(%d,%hu,%hu)\n",
+		rtsp_info("udp transport found, ports=(%d,%hu,%hu)\n",
 		       (int)expinfo.pbtype, expinfo.loport, expinfo.hiport);
 
 		exp = nf_ct_expect_alloc(ct);
@@ -424,7 +441,7 @@
 			//exp->mask.dst.u.udp.port  = 0xfffe;
 		}
 
-		pr_debug("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",
+		rtsp_info("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",
 		       NIPQUAD(exp->tuple.src.u3.ip),
 		       ntohs(exp->tuple.src.u.udp.port),
 		       NIPQUAD(exp->tuple.dst.u3.ip),
@@ -454,6 +471,118 @@
  return NF_ACCEPT;
 }
 
+static inline int
+help_in_ex(struct sk_buff *skb, unsigned char *rb_ptr, unsigned int datalen,
+           struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+{
+	char*   	pdata = rb_ptr;
+	char*  		pTranData;
+	char*   	pTemp;
+	uint    	dataoff = 0;
+	u_int16_t 	loPort = 0;
+	u_int16_t 	hiPort = 0;
+	uint    	numlen = 0;
+	char        rbuf1[16];      /* Replacement buffer (one port) */
+    uint        rbuf1len;       /* Replacement len (one port) */
+    char        rbufa[16];      /* Replacement buffer (all ports) */
+    uint        rbufalen;       /* Replacement len (all ports) */
+    uint        origoff;
+    uint        origlen;
+	int ret = NF_ACCEPT;
+
+	u_int16_t portex = 0;
+	__be32 srcip = ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip;
+
+	portex = (u_int16_t)IP_CONVERT_TO_PORT(srcip);
+
+	while (dataoff < datalen)
+	{
+		uint    cmdoff = dataoff;
+		uint    hdrsoff = 0;
+		uint    hdrslen = 0;
+		uint    cseqoff = 0;
+		uint    cseqlen = 0;
+		uint    transoff = 0;
+		uint    translen = 0;
+		uint    off;
+
+		if (!rtsp_parse_message(pdata, datalen, &dataoff,
+					&hdrsoff, &hdrslen,
+					&cseqoff, &cseqlen,
+					&transoff, &translen))
+			break;      /* not a valid message */
+
+		if (strncmp(pdata+cmdoff, "RTSP/1.0 ", 9) != 0)
+			continue;   /* not a SETUP message */
+		rtsp_info("found a response message\n");
+
+		if(translen)
+		{
+			rtsp_info("have transport data\n");
+			pTranData = pdata + transoff;
+			if (translen < 10 || !iseol(pTranData[translen-1]) ||
+	    		nf_strncasecmp(pTranData, "Transport:", 10) != 0)
+	    	{
+				rtsp_info("sanity check failed\n");
+				return NF_ACCEPT;
+			}
+
+			rtsp_info("tran='%.*s'\n", (int)translen, pTranData);
+			off += 10;
+			SKIP_WSPACE(pTranData, translen, off);
+
+			if((pTemp = strstr(pTranData, "client_port=")))
+			{
+				off = 12 + (pTemp - pTranData);
+				origoff = transoff + off;
+				numlen = nf_strtou16(pTranData+off, &loPort);
+				off += numlen;
+				origlen = numlen;
+
+				loPort -= portex;
+
+				rbuf1len = sprintf(rbuf1, "%hu", loPort);
+
+				rtsp_info("the numlen is %d, using port %hu\n", numlen, loPort);
+				if (pTranData[off]== '-')
+				{
+					off++;
+					origlen ++;
+					numlen = nf_strtou16(pTranData+off, &hiPort);
+					off += numlen;
+					origlen += numlen;
+					hiPort -= portex;
+					rbufalen = sprintf(rbufa, "%hu-%hu", loPort, hiPort);
+					rtsp_info("using port %hu-%hu\n", loPort, hiPort);
+
+				}
+				else if (pTranData[off] == '/')
+				{
+					off++;
+					origlen ++;
+					numlen = nf_strtou16(pTranData+off, &hiPort);
+					off += numlen;
+					origlen += numlen;
+					hiPort -= portex;
+					rbufalen = sprintf(rbufa, "%hu/%hu", loPort, hiPort);
+					rtsp_info("using port %hu/%hu\n", loPort, hiPort);
+				}
+
+
+				if (0 == hiPort)
+				{
+					nf_nat_mangle_tcp_packet(skb, ct, ctinfo, origoff, origlen, rbuf1, rbuf1len);
+				}
+				else
+				{
+					nf_nat_mangle_tcp_packet(skb, ct, ctinfo, origoff, origlen, rbufa, rbufalen);
+				}
+			}
+		}
+	}
+	return ret;
+}
+
 static int help(struct sk_buff *skb, unsigned int protoff,
 		struct nf_conn *ct, enum ip_conntrack_info ctinfo) 
 {
@@ -470,7 +599,7 @@
 	} 
 
 	/* Not whole TCP header? */
-	th = skb_header_pointer(skb,protoff, sizeof(_tcph), &_tcph);
+	th = skb_header_pointer(skb, protoff, sizeof(_tcph), &_tcph);
 
 	if (!th)
 		return NF_ACCEPT;
@@ -505,6 +634,7 @@
 	case IP_CT_DIR_REPLY:
 		pr_debug("IP_CT_DIR_REPLY\n");
 		/* inbound packet: server->client */
+		help_in_ex(skb, rb_ptr, datalen, ct, ctinfo);
 		ret = NF_ACCEPT;
 		break;
 	}
Index: extensions/rtsp/nf_nat_rtsp.c
===================================================================
--- extensions/rtsp/nf_nat_rtsp.c	(版本 1952)
+++ extensions/rtsp/nf_nat_rtsp.c	(工作副本)
@@ -3,6 +3,10 @@
  *
  * Copyright (c) 2013 The Linux Foundation. All rights reserved.
  *
+ * (C) 2014 TP-LINK Communications. Inc.
+ * 	  7/10/2014, <guodongxian@tp-link.com.cn>
+ * 	    Fixed failure of more than one client to RTSP server.
+ *
  * (C) 2010 Atheros Communications. Inc.
  *    3/23/2010, <yyu@atheros.com>
  *      Fixed failure of RTCP transportation when "PLAY" command
@@ -75,6 +79,14 @@
 
 #define SKIP_WSPACE(ptr,len,off) while(off < len && isspace(*(ptr+off))) { off++; }
 
+/* Add by guodongxian, 2014-07-10 */
+#define IP_CONVERT_TO_PORT(__ip) \
+	((((__ip & 0xff000000) >> 24) + (__ip & 0x000000ff)) << 4)
+
+/*** debug trace ***/
+#define rtsp_info(fmt, args...)\
+	/* printk(KERN_INFO "%s:"fmt, __FUNCTION__, ##args) */
+
 /*** helper functions ***/
 
 static void
@@ -201,7 +213,7 @@
 
 
                 hiport = loport + 1; //~exp->mask.dst.u.udp.port;
-                pr_debug("using ports %hu-%hu\n", loport, hiport);
+                rtsp_info("using ports %hu-%hu\n", loport, hiport);
                 if(nf_ct_expect_related(rtcp_exp) == 0)
                 {
                     nf_ct_expect_put(rtcp_exp);
@@ -296,7 +308,7 @@
                                                          tranoff + off + 12, diff - 12 - 1, szextaddr, extaddrlen))
                     {
                         /* mangle failed, all we can do is bail */
-			nf_ct_unexpect_related(exp);
+                    	nf_ct_unexpect_related(exp);
                         return 0;
                     }
                     get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -337,11 +349,12 @@
                 numlen = nf_strtou16(ptran+off, &port);
                 off += numlen;
                 origlen += numlen;
+                rtsp_info("multiple ports: %u:%u\n", port, prtspexp->loport);
                 if (port != prtspexp->loport)
                 {
-                    pr_debug("multiple ports found, port %hu ignored\n", port);
+                    rtsp_info("multiple ports found, port %hu ignored\n", port);
                 }
-                else
+                /*else*/
                 {
                     if (ptran[off] == '-' || ptran[off] == '/')
                     {
@@ -366,7 +379,7 @@
                                               origoff, origlen, rbuf, rbuflen))
                     {
                         /* mangle failed, all we can do is bail */
-			nf_ct_unexpect_related(exp);
+                    	nf_ct_unexpect_related(exp);
                         return 0;
                     }
                     get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -406,7 +419,7 @@
     hdrsoff = matchoff;//exp->seq - ntohl(tcph->seq);
     hdrslen = matchlen;
     off = hdrsoff;
-    pr_debug("NAT rtsp help_out\n");
+    rtsp_info("NAT rtsp help_out\n");
 
     while (nf_mime_nextline(ptcp, hdrsoff+hdrslen, &off, &lineoff, &linelen))
     {
@@ -419,15 +432,15 @@
             pr_info("!! overrun !!");
             break;
         }
-        pr_debug("hdr: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
+        rtsp_info("hdr: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
 
         if (nf_strncasecmp(ptcp+lineoff, "Transport:", 10) == 0)
         {
             uint oldtcplen = tcplen;
-	    pr_debug("hdr: Transport\n");
+            	pr_debug("hdr: Transport\n");
             if (!rtsp_mangle_tran(ctinfo, exp, prtspexp, skb, lineoff, linelen))
             {
-		pr_debug("hdr: Transport mangle failed");
+            	pr_debug("hdr: Transport mangle failed");
                 break;
             }
             get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -435,7 +448,7 @@
             off -= (oldtcplen-tcplen);
             lineoff -= (oldtcplen-tcplen);
             linelen -= (oldtcplen-tcplen);
-            pr_debug("rep: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
+            rtsp_info("rep: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
         }
     }
 
@@ -456,9 +469,9 @@
         rc = help_out(skb, ctinfo, matchoff, matchlen, prtspexp, exp);
         break;
     case IP_CT_DIR_REPLY:
-	pr_debug("unmangle ! %u\n", ctinfo);
-    	/* XXX: unmangle */
-	rc = NF_ACCEPT;
+		pr_debug("unmangle ! %u\n", ctinfo);
+			/* XXX: unmangle */
+		rc = NF_ACCEPT;
         break;
     }
     //UNLOCK_BH(&ip_rtsp_lock);
@@ -470,10 +483,16 @@
 {
 	struct nf_nat_ipv4_range range;
 	u_int32_t newip;
+	u_int16_t portex = 0;
 	struct nf_conn *master = ct->master;
+
 	newip = master->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip;
-	range.flags = IP_NAT_RANGE_MAP_IPS | NF_NAT_RANGE_PROTO_SPECIFIED;
-	range.min = range.max = exp->saved_proto;
+	portex = (u_int16_t)IP_CONVERT_TO_PORT(newip);
+	ct->tuplehash[IP_CT_DIR_REPLY].tuple.src.u.all =
+			htons((u_int16_t)(ntohs(ct->tuplehash[IP_CT_DIR_REPLY].tuple.src.u.all) - portex));
+
+	range.flags = IP_NAT_RANGE_MAP_IPS /*| NF_NAT_RANGE_PROTO_SPECIFIED*/;
+	/*range.min = range.max = exp->saved_proto;*/
 	range.min_ip = range.max_ip = newip;
 	nf_nat_setup_info(ct, &range, IP_NAT_MANIP_DST);
 	/* Change src to where master sends to, but only if the connection
@@ -501,7 +520,7 @@
 
 	BUG_ON(nf_nat_rtsp_hook);
 	nf_nat_rtsp_hook = help;
-        nf_nat_rtsp_hook_expectfn = &expected;
+    nf_nat_rtsp_hook_expectfn = &expected;
 
 	if (stunaddr != NULL)
 		extip = in_aton(stunaddr);
